const TimeoutLen = 5000;

function Ev() {
	this.timer = null;
	this.Logins = [];
}

Ev.prototype.timeout_init = function() {
	this.timer = this.timer || setTimeout(() => this.timeoutEvent(), TimeoutLen);
};

Ev.prototype.list_login = function() {
	return Object.keys(this.Logins).map((a) =>
		({ Login: a, LastDate: this.Logins[a].dt, numConnection: this.Logins[a].list.length })
	);
};

Ev.prototype._invoke = function(a) {
	const now = Date.now() - TimeoutLen;
	var logins = Object.keys(this.Logins);
	for (let i = 0; i < logins.length; i++) {
		const login = logins[i];
		const x = this.Logins[login];
		if (x.list.length === 0 && x.dt < now) {
			delete this.Logins[login];
			a.push({ Action: 1, Login: login });
		}
	}
	//	console.log(JSON.stringify(a));
	logins = Object.keys(this.Logins);
	for (let i = 0; i < logins.length; i++) {
		const A = this.Logins[logins[i]].list;
		while (A.length > 0) {
			A.pop()(a);
		}
	}
	return logins.length > 0;
};

Ev.prototype.timeoutEvent = function() {
	this.timer = null;
	if (this._invoke([]))
		this.timeout_init();
};

Ev.prototype.eventD = function(a) {
	if (this.timer) {
		clearTimeout(this.timer);
		this.timer = null;
	}
	if (this._invoke(a))
		this.timeout_init();
}

Ev.prototype.Connect = function(login, fn) {
	if (this.Logins[login] === undefined) {
		//connect new ip		
		this.eventD([{ Action: 0, Login: login }]);;
		this.timeout_init();
		this.Logins[login] = { list: [] };
	}
	this.Logins[login].dt = Date.now();
	this.Logins[login].list.push(fn);
}
module.exports = Ev;
